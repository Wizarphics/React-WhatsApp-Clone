{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\chat\\\\appreact\\\\client\\\\src\\\\context\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  const createConversation = recipients => {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  };\n\n  const formattedConversations = conversations.map(conversation => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      recipients\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"ADtPWNMnGiyYAnxDUYXjSDYb8Ow=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","conversation","recipient","contact","find","id","name","selected","index","value","selectConversationIndex"],"sources":["C:/xampp/htdocs/chat/appreact/client/src/context/ConversationsProvider.js"],"sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\nimport { useContacts } from './ContactsProvider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n    return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({ children }) {\r\n    const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n\r\n    const { contacts } = useContacts()\r\n\r\n    const createConversation = (recipients) => {\r\n        setConversations(prevConversations => {\r\n            return [...prevConversations, { recipients, messages: [] }];\r\n        })\r\n    }\r\n\r\n    const formattedConversations = conversations.map(conversation => {\r\n        const recipients = conversation.recipients.map(recipient =>{\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === recipient\r\n            })\r\n\r\n            const name = (contact && contact.name) || recipient\r\n            return { id: recipient, name}\r\n        })\r\n\r\n        const selected = index === selectedConversationIndex\r\n        return { ...conversation, recipients}\r\n    })\r\n\r\n    const value = {\r\n        conversations: formattedConversations,\r\n        selectConversationIndex: setSelectedConversationIndex,\r\n        createConversation\r\n    }\r\n\r\n    return ( \r\n    <ConversationsContext.Provider value = { value }>\r\n        { children } \r\n    </ConversationsContext.Provider>\r\n    )\r\n}"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGL,KAAK,CAACM,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;EAAA;;EAC/B,OAAON,UAAU,CAACI,oBAAD,CAAjB;AACH;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,OAA6C;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAChD,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAzD;EACA,MAAM,CAACS,yBAAD,EAA4BC,4BAA5B,IAA4DX,QAAQ,CAAC,CAAD,CAA1E;EAEA,MAAM;IAAEY;EAAF,IAAeV,WAAW,EAAhC;;EAEA,MAAMW,kBAAkB,GAAIC,UAAD,IAAgB;IACvCL,gBAAgB,CAACM,iBAAiB,IAAI;MAClC,OAAO,CAAC,GAAGA,iBAAJ,EAAuB;QAAED,UAAF;QAAcE,QAAQ,EAAE;MAAxB,CAAvB,CAAP;IACH,CAFe,CAAhB;EAGH,CAJD;;EAMA,MAAMC,sBAAsB,GAAGT,aAAa,CAACU,GAAd,CAAkBC,YAAY,IAAI;IAC7D,MAAML,UAAU,GAAGK,YAAY,CAACL,UAAb,CAAwBI,GAAxB,CAA4BE,SAAS,IAAG;MACvD,MAAMC,OAAO,GAAGT,QAAQ,CAACU,IAAT,CAAcD,OAAO,IAAI;QACrC,OAAOA,OAAO,CAACE,EAAR,KAAeH,SAAtB;MACH,CAFe,CAAhB;MAIA,MAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;MACA,OAAO;QAAEG,EAAE,EAAEH,SAAN;QAAiBI;MAAjB,CAAP;IACH,CAPkB,CAAnB;IASA,MAAMC,QAAQ,GAAGC,KAAK,KAAKhB,yBAA3B;IACA,OAAO,EAAE,GAAGS,YAAL;MAAmBL;IAAnB,CAAP;EACH,CAZ8B,CAA/B;EAcA,MAAMa,KAAK,GAAG;IACVnB,aAAa,EAAES,sBADL;IAEVW,uBAAuB,EAAEjB,4BAFf;IAGVE;EAHU,CAAd;EAMA,oBACA,QAAC,oBAAD,CAAsB,QAAtB;IAA+B,KAAK,EAAKc,KAAzC;IAAA,UACMpB;EADN;IAAA;IAAA;IAAA;EAAA,QADA;AAKH;;IArCeD,qB;UAC8BL,e,EAGrBC,W;;;KAJTI,qB"},"metadata":{},"sourceType":"module"}